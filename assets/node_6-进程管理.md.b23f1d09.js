import{_ as s,c as l,o as n,a as e}from"./app.a8484bb5.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"进程管理","slug":"进程管理","link":"#进程管理","children":[]}],"relativePath":"node/6-进程管理.md"}'),o={name:"node/6-进程管理.md"},a=e(`<h2 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-hidden="true">#</a></h2><ol><li>服务模型的变迁 <ul><li>同步模型-单进程</li><li>进程复制</li><li>多线程</li><li>事件驱动</li></ul></li></ol><blockquote><p>单线程的优势：可以减少不必要的内存开销和上下文切换开销； 单线程的劣势：不能充分利用多核 CPU 的能力，同时在稳定性和健壮性上不够；</p></blockquote><blockquote><p>事件驱动的服务模型（如 Node，Nginx），主要为例解决高并发问题，方式是通过事件驱动的方式；</p></blockquote><ol start="2"><li>Node 的事件驱动服务模型架构</li></ol><p>可以理解 Node 服务模型架构是基于事件驱动的多进程管理；</p><ul><li>事件驱动--提升了对高并发的处理方式；</li><li>合理的多进程管理--充分利用多核 CPU 的能力，同时提升稳定性，健壮性和可伸缩性；</li></ul><p>Node 多进程结构的模式： 主从模式---Master-Worker 模式</p><ul><li>一个 master 主进程：管理整个服务，不处理具体的业务；</li><li>多子进程：由 master 分配，处理各项具体的业务；</li></ul><p>这其中就涉及到进程的创建和进程的通信；（Node 这里是主从进程才建立 IPC 通信；）</p><ol start="3"><li>创建子进程<br> Node 中通过 child_process 模块提供创建子进程能力： 主要通过 4 个方法：</li></ol><ul><li>spaw()：创建一个子进程来<strong>执行命令，不支持回调</strong>；</li><li>exec()：创建一个子进程来<strong>执行命令，但是支持通过传递回调函数的方式来获知子进程状况</strong>；</li><li>execFile()：创建一个子进程来<strong>执行可执行文件，支持回调</strong>；</li><li>fork()：创建一个子进程来<strong>执行 Js 文件模块,不支持回调</strong></li></ul><p>这 4 种方式的差异：</p><table><thead><tr><th>类型</th><th>回调/异常</th><th>进程类型</th><th>执行类型</th><th>可设置超时</th></tr></thead><tbody><tr><td>spaw()</td><td>NO</td><td>任意</td><td>命令</td><td>NO</td></tr><tr><td>exec()</td><td>Yes</td><td>任意</td><td>命令</td><td>Yes</td></tr><tr><td>execFile()</td><td>Yes</td><td>任意</td><td>可执行文件</td><td>Yes</td></tr><tr><td>fork()</td><td>NO</td><td>Node 类型</td><td>Js 文件</td><td>NO</td></tr></tbody></table><ol start="4"><li><p>进程事件</p><ul><li><p>[send] send(message[, sendHandle[, options]][, callback]) 当父进程和子进程之间建立了 IPC 通道时，可以使用 subprocess.send() 方法向子进程发送消息。 当子进程是 Node.js 实例时，可以通过 &#39;message&#39; 事件接收这些消息。</p></li><li><p>[message] 事件接收两个字段：</p><ul><li>message [Object] 解析的 JSON 对象或原始值。</li><li>sendHandle [Handle] net.Socket 或 net.Server 对象、或未定义。</li></ul></li></ul><p>如： process.on(&#39;message&#39;, (message，tcp) =&gt; { console.log(&#39;CHILD got message:&#39;, message); });</p><p>子进程使用 process.send() 发送消息时，则触发 &#39;message&#39; 事件。 消息经过序列化和解析；</p><ul><li>[error] error&#39; 事件在以下情况下触发：</li><li>无法衍生该进程</li><li>进程无法终止</li><li>向子进程发送消息失败。</li></ul><p>childProcess.on(&#39;error&#39;,(err)=&gt;{ console.log(err); })</p><blockquote><p>发生错误后，&#39;exit&#39; 事件可能会也可能不会触发。 在监听 &#39;exit&#39; 和 &#39;error&#39; 事件时，防止多次意外调用句柄函数。</p></blockquote><ul><li><p>[exit] 事件接收两个字段：</p><ul><li>code [number] 如果子进程自己退出，则为退出码。</li><li>signal [string] 终止子进程的信号。</li></ul></li></ul><blockquote><p>&#39;exit&#39; 事件在子进程结束后触发。 如果进程退出，则 code 为最终的进程退出码，否则为 null。 如果进程因收到信号而终止，则 signal 是信号的字符串名称，否则为 null。 两者之一将始终是非 null。 当 &#39;exit&#39; 事件被触发时，子进程标准输入输出流可能仍处于打开状态。</p></blockquote><p>使用： 方式一主动调用： childProcess.exit(1);// 退出当前进程</p><p>方式二监听 exit： // 通过 kill 触发 // 子进程 childProcess.kill([signal]); // 主进程 process.kill([pid],[signal]); //监听事件 childProcess.on(&#39;exit&#39;, (signal) =&gt; { console.log(<code>Child exited with code \${signal}</code>); });</p><blockquote><p>childProcess.exitCode 属性表示子进程的退出码。</p></blockquote><hr><blockquote><p>childProcess.exitCode = 1;进程退出。</p></blockquote><ul><li><p>[close] 事件支持参数</p><ul><li>code [number] 如果子进程自己退出，则为退出码。</li><li>signal [string] 终止子进程的信号。</li></ul></li></ul><p>// 监听 childProcess.on(&#39;close&#39;, (code) =&gt; { console.log(<code>child process close all stdio with code \${code}</code>); });</p><p>// 主动调用 process.close(()=&gt;{ process.kill([childpid],[signal]); })</p><blockquote><p><strong>在进程已结束并且子进程的[标准输入输出流已关闭]之后，则触发 &#39;close&#39; 事件</strong>。 这与 &#39;exit&#39; 事件不同，因为多个进程可能共享相同的标准输入输出流。 &#39;close&#39; 事件将始终在 &#39;exit&#39; 或 &#39;error&#39;（如果子进程衍生失败）已经触发之后触发。</p></blockquote><ul><li>[disconnect]<br> 在父进程或者子进程中调用 disconnect()方法时触发该事件，在调用更改方法时将关闭监听 IPC 通道；</li></ul><p><strong>child_process 实现多个子进程共享端口 Demo</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">/**</span></span>
<span class="line"><span style="color:#A6ACCD;"> * cluster 实现多个子进程共享端口 Demo</span></span>
<span class="line"><span style="color:#A6ACCD;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">// master 代码</span></span>
<span class="line"><span style="color:#A6ACCD;">var cp = require(&quot;child_process&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">var child1 = cp.fork(&quot;./child.js&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">var child2 = cp.fork(&quot;./child.js&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">var server = require(&quot;net&quot;).createServer();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">server.on(&quot;connection&quot;, function (socket) {</span></span>
<span class="line"><span style="color:#A6ACCD;">socket.end(&quot;handle by parent!&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//  listen()侦听网络端口的调用，它将拿到该文件描述符，通过 SO_REUSEADDR 端口重用，从而实现[多个子进程共享端口]**</span></span>
<span class="line"><span style="color:#A6ACCD;">server.listen(3000, function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">child1.send(&quot;server&quot;, server);</span></span>
<span class="line"><span style="color:#A6ACCD;">child2.send(&quot;server&quot;, server);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// child.js</span></span>
<span class="line"><span style="color:#A6ACCD;">process.on(&quot;message&quot;, function (m, server) {</span></span>
<span class="line"><span style="color:#A6ACCD;">if (m === &quot;server&quot;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    server.on(&quot;connection&quot;, function (socket) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    socket.end(&quot;handle by child,pid is &quot;, process.pid);</span></span>
<span class="line"><span style="color:#A6ACCD;">    });</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 执行</span></span>
<span class="line"><span style="color:#A6ACCD;">curl &quot;http://127.0.0.1:3000&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">多次执行，发现每次会在主进程和子进程之间轮流调用；</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>进程间的通信 上面我们介绍了进程的事件，知道我们可以通过 send 和 message 来进行父子进程间信息的通信，那背后的原理是什么呢？下面让我们一起来深入了解下；</p><blockquote><p>延展： 我们知道在浏览器端，我们在使用 Web Worker 的时候（处理复杂计算会阻塞渲染的时候，启动 Web Worker 开启新的线程，该线程不阻塞主线程和 UI 渲染线程），也需要进行线程间通信，通过 postMessage()和 onmessage()的方式进行通信；</p></blockquote><p>首先我们看下操作系统进程通信的一般技术：</p><ul><li><p>管道通信：（<strong>共享文件</strong>） 通过<strong>共享文件</strong>的方式实现通信；传输信息少，并且实现的是<strong>半双工通信</strong>，即某一时刻只能单向传输，也就是说某一时刻只能一个读一个写，不可能存在两个都写或者两个都读。<strong>要实现父子进程双方互动通信，需要定义两个管道。</strong> 管道通信方式也分：匿名管道，命名管道；</p></li><li><p>消息队列：（<strong>消息传递</strong>） 通过<strong>消息传递</strong>实现通信；<strong>进程间的数据交换是以格式化的消息为单位</strong>，程序员直接利用操作系统提供的一组通信命令（原语），不仅能实现大量数据的传递，而且还隐藏了通信的实现细节，使通信过程对用户是透明的，从而大幅减少通信程序编制的复杂性。</p></li><li><p>共享内存：（<strong>共享内存</strong>） 操作系统采用虚拟内存管理，即每个进程都有各自的虚拟内存。而共享内存就是借助这个虚拟内存映射机制，分配一块共享的内存块，使进程 A 和进程 B 的虚拟地址映射到同一个物理地址，这样就可以互相读取和写入数据了。</p></li><li><p>套接字 Socket： 如 Domain Socket（双向通信）</p></li><li><p>信号量...</p></li></ul><p>我们再回归到 Node 中的进程间通信；</p><ul><li>Node 中的进程通信只允许父进程和子进程的通信；</li><li>Node 父子进程通信通过创建 IPC(Inter-Process-Communication 进程间通信)通道来实现；</li></ul><p><strong>那 IPC 是通过什么进程通信技术实现的呢？</strong><br> Node 实现 IPC 通道是通过管道（pipe）技术和 Domain Socket 技术； 在 Node 中，管道一个抽象层面的称呼，具体细节由 libuv 提供，具体<strong>在 Windows 下由命名管道实现，在*nix 系统中，则是采用 Unix Domain Socker 实现（）</strong>；</p><blockquote><p>父进程在实际创建子进程的之前，会先创建一个 IPC 通道并监听这个 IPC 通道；然后创建子进程后，通过环境变量告知子进程该 IPC 通过的文件描述符；子进程在启动的过程中（子进程需要是 Node 进程），根据这个 IPC 通过的文件描述符去主动连接该 IPC 通道；从而实现父子进程通过 IPC 通道通信；</p></blockquote><p><strong>进程间数据传递的内容？</strong> Node 进程间除了传递简单信息，还能传递句柄（handle）；</p></li><li><p>Node 关于句柄(Handle)传递</p><ul><li><p><strong>什么事句柄？</strong> 句柄事一种可以用来<strong>标识资源的引用</strong>，它的内部包含了只想对象的<strong>文件描述符</strong>，通过这个文件描述符来获取对象，实现信息传递功能； 比如句柄可以用来标识一个服务器端 Socket 对象，一个客户端的 Socket 对象，一个 UDP 套接字，一个管道等；</p></li><li><p>传递句柄的目的：传递更多内容；</p></li></ul></li><li><p>进程集群管理 （<strong>处理稳定性和健壮性问题</strong>） 有了子进程，我们通过实现一个服务就会出现需要管理多进程的情况； 那怎么做好多进程管理，管理涉及哪些方面呢？</p><p>多进程管理涉及哪些方面呢？</p><ul><li><p><strong>自动重启</strong>： 怎么更好的实现平滑的重启； 先启动一个 worker 进程，再把原有的 work 进程关闭。这样就能实现不中断地重启 Node 服务。</p></li><li><p><strong>负载均衡</strong>： 怎么实现多进程的合理分配；<br> Node 中实现的方式有两种：</p><ul><li>1）抢占式：只依据 CPU 的繁忙度；Node 默认提供的方式； 但是对于 Node 而言，需要分清楚到底是 CPU 繁忙还是 I/O 繁忙，对于业务进程来说，CPU 不繁忙，I/O 繁忙，该进程即使抢到了较多请求，也不能及时处理，形成负载不均衡的情况；</li><li>2）<strong>Round-Robin（论叫调度）</strong>： Node 优化的调度方式； 工作方式是：主进程接受连接后，将其一次分发给工作进程，分发的策略是在 N 个工作进程中，每次选择第 i=(i+1)mod n 个进程来发送连接；</li></ul></li><li><p><strong>状态共享</strong>： 怎么实大现数据在多个进程间共享呢； 可以有两种方式：</p><ul><li><p>第三方数据存储： 比如数据存放在数据库，磁盘文件，缓存服务（如 Redis）中，其他工作进程启动时将其读取进内存；</p></li><li><p>主动通知</p></li></ul></li></ul></li></ol><p>管理进程，我们开发者需要做很多的工作去处理这些多进程的问题，那有没有方式或工具封装了处理方式，方便开发者简单便捷实用呢？ 下面看 Cluster</p><ol start="8"><li><p>Cluster <strong>Cluster 是 Node 提供的模块，用来构建强大的单机 Node 集群，解决多核 CPU 利用率以及稳定性和健壮性问题；实现丝滑的自动重启，负载均衡</strong></p><p>Cluster 模块是 child_process 和 net 模块的组合应用；</p><ul><li>8.1）<strong>Cluster 工作原理</strong>： cluster 启动时，它会在内部启动 TCP 服务器，在 cluster.fork()子进程时，将这个 TCP 服务器端 socket 的文件描述符发送给工作进程；</li></ul><p>那怎么将 TCP 服务器端 socket 的文件描述符发送给工作进程呢？<br><strong>如果进程时通过 cluster.fork()方式复制出来的，那么它的环境变量里就存在 NODE_UNIQUE_ID；如果工作进程存在 listen()侦听网络端口的调用，它将拿到该文件描述符，通过 SO_REUSEADDR 端口重用，从而实现[多个子进程共享端口]</strong>；</p><p><strong>cluster 实现多个子进程共享端口 Demo</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const cluster = require(&#39;cluster&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const http = require(&#39;http&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const numCPUs = require(&#39;os&#39;).cpus().length;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">if (cluster.isMaster) {</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(\`主进程 \${process.pid} 正在运行\`);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 衍生工作进程。</span></span>
<span class="line"><span style="color:#A6ACCD;">for (let i = 0; i &lt; numCPUs; i++) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    cluster.fork();</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">cluster.on(&#39;exit&#39;, (worker, code, signal) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(\`工作进程 \${worker.process.pid} 已退出\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">} else {</span></span>
<span class="line"><span style="color:#A6ACCD;">// 工作进程可以共享任何 TCP 连接。</span></span>
<span class="line"><span style="color:#A6ACCD;">// 在本例子中，共享的是一个 HTTP 服务器。</span></span>
<span class="line"><span style="color:#A6ACCD;">http.createServer((req, res) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.writeHead(200);</span></span>
<span class="line"><span style="color:#A6ACCD;">    res.end(&#39;你好世界\\n&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}).listen(8000);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(\`工作进程 \${process.pid} 已启动\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>8.2）Cluster 事件 <ul><li>fork： 复制一个工作进程后触发该事件；</li><li>online： 复制好一个工作进程后，工作进程主动发送一条 online 消息给主进程，主进程收到消息触发该事件； 也就该事件不会在工作进程内部被触发。</li><li>listening： 工作进程中调用 listen()（共享了服务器端 Socket）后，发送一条 listening 消息给主进程，主进程收到消息触发该事件； 也就该事件不会在工作进程内部被触发。</li><li>disconnect： 主进程和工作进程之间 IPC 通道断开后会触发该事件；</li><li>exit： 有工作进程退出时触发该事件；</li><li>setup： cluster.setupMaster()执行后触发该事件；</li></ul></li></ul></li></ol><blockquote><p><a href="https://www.nodeapp.cn/cluster.html" target="_blank" rel="noreferrer">Node Cluster 官网</a></p></blockquote>`,18),p=[a];function t(i,r,c,d,C,u){return n(),l("div",null,p)}const D=s(o,[["render",t]]);export{g as __pageData,D as default};

import{_ as s,c as n,o as l,a as p}from"./app.a8484bb5.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"异步编程","slug":"异步编程","link":"#异步编程","children":[]}],"relativePath":"node/3-异步编程.md"}'),a={name:"node/3-异步编程.md"},e=p(`<h2 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-hidden="true">#</a></h2><p>既然有异步 I/O 的能力，那怎么更好的利用异步 I/O 的能力呢？ 我们需要了解异步编程；</p><ol><li><p>异步编程的基础---函数式编程 关于函数式编程，笔者之前有过一个学习笔记：[/blog/Notes/函数式编程.md]； 我们再来简单说一下我们异步编程需要了解到的： 首先是函数作为一等公民：这一条最为重要；</p><ul><li><p>高阶函数： Node 提供的最基本的事件模块对于事件的处理方式是基于高阶函数的特性来实现的； <strong>高阶函数可以理解是可以把函数作为参数，或是把函数作为返回值的函数；</strong></p></li><li><p>偏函数用法： 我们再来先看一下定义：</p><blockquote><p>偏函数 (Partial application)-局部应用： 定义： 在计算机科学中，局部应用是指固定一个函数的一些参数，然后产生另一个更小元的函数。</p></blockquote><p>我们再看一下偏函数的用法： 及 <strong>创建一个调用另一个部分参数或变量已经预制的函数的函数；</strong> 及<strong>创建一个需要调用多次才真正执行实际函数的函数；</strong></p></li></ul></li></ol><p>我们知道异步编程是处理异步的，那异步编程会有哪些困难呢？需要处理什么问题呢？</p><ol start="2"><li>异步编程需处理苦难点：</li></ol><ul><li><p>异常处理： 异步编程在处理异常时，因为事件的执行环境会改变，所以对于异步的调用的异常处理是异步编程要处理的问题；</p></li><li><p>嵌套回调处理： 利用回调函数来处理回调，会造成嵌套地狱，也难以维护；</p></li><li><p>怎么实现阻塞代码： 及何如实现一个阻塞程序代码继续执行的编程方式；</p></li><li><p>怎么实现多线程编程？ （ps：这里使用 child_process）</p></li><li><p>怎么实现异步转同步？ 当我们需要依赖多个异步执行后的结果时，怎么能用更好的实现呢？</p></li></ul><ol start="3"><li><p>异步编程的解决方案 目前主要的几个方式如下：</p><ul><li><p>发布/订阅方式 如核心模块：events</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const listen=new events.EventEmitter();</span></span>
<span class="line"><span style="color:#A6ACCD;">listen.on(()=&gt;{});</span></span>
<span class="line"><span style="color:#A6ACCD;">listen.error(()=&gt;{});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">listen.emit(})</span></span>
<span class="line"><span style="color:#A6ACCD;">//或</span></span>
<span class="line"><span style="color:#A6ACCD;">const proxy=new events.EventProxy();</span></span>
<span class="line"><span style="color:#A6ACCD;">proxy.on(()=&gt;{})</span></span>
<span class="line"><span style="color:#A6ACCD;">proxy.fail(()=&gt;{});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><blockquote><p>js 也可能利用哨兵变量和偏函数，高阶函数来处理一些异步问题；</p></blockquote></li><li><p>Promise</p></li><li><p>利用流程来控制-流程控制库： <strong>利用尾触发和 Next 的方式来实现流程控制；</strong></p><blockquote><p>什么是尾调用：需要手工调用才能持续执行后续调用的方式方法； 比如：<strong>中间件</strong></p></blockquote><p>流程控制通过也会结合队列来实现；</p></li></ul></li></ol>`,7),t=[e];function o(i,c,r,_,d,C){return l(),n("div",null,t)}const g=s(a,[["render",o]]);export{u as __pageData,g as default};

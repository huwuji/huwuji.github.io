import{_ as e,c as t,o as i,a as l}from"./app.b8d11a0b.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"前端工程化：","slug":"前端工程化","link":"#前端工程化","children":[]}],"relativePath":"engineering/前端工程化简述.md"}'),r={name:"engineering/前端工程化简述.md"},o=l('<h3 id="前端工程化" tabindex="-1">前端工程化： <a class="header-anchor" href="#前端工程化" aria-hidden="true">#</a></h3><blockquote><p>原址：<a href="https://github.com/huwuji/blog/tree/master/notes/FE-thinking" target="_blank" rel="noreferrer">https://github.com/huwuji/blog/tree/master/notes/FE-thinking</a></p></blockquote><p>什么是工程化，个人理解是以规范的，系统的，自动化的流程代替个人差异性的处理过程；</p><p>对于前端工程化，个人想分为 4 个部分来说；</p><ul><li><p>1.前端开发环境的搭建--作用于**开发阶段 ** 架构，CLI，有利于开发的各种工具，比如 webpack，eslint，本地单元测试，本地静态扫描;</p></li><li><p>2.<strong>前端自动化测试</strong>--作用于 CI 阶段， 可以分为</p><ul><li><p>2.1 静态自动化测试： 单元测试，静态扫描测试（比如对于埋点，巡检的部分正确性的静态扫瞄检查）...</p></li><li><p>2.2 基于运行环境的自动化测试： 比如依赖 lighthouse 环境的性能测试，基于 puppeteer 的自建服务上跑的性能测试（巡检测试）---包括 e2e 测试，UI 自动化测试，性能测试等的测试要点，测试用例；</p></li></ul></li><li><ol start="3"><li><strong>前端监控</strong> ---基于项目部署后 CD 收集数据，提示基础的异常报警；基于 sensor 的埋点和 sentry 的异常监控报警；</li></ol><ul><li>3.1 基于用户侧监控--在用户侧注入 SDK 来监控用户环境的行为和异常，收集用户数据； 数据包括：</li><li>异常数据（js 异常，资源加载异常，http 请求异常，promise 异常捕捉），</li><li>web 页面性能数据（FCP,LCP,TTFB,TTI,FID,TBT,...），</li><li>业务埋点数据</li><li>3.2 基于自建服务模拟的监控</li><li>巡检监控（puppeteer）</li><li>OOM 监控...</li></ul></li><li><ol start="4"><li><strong>前端可预测性服务</strong> 利用收集的数据，定义构建数据模型，业务模型，对不特殊数据变化进行预测和分析，提前告警； 可以理解是对未知的异常（从没发现过的异常）的监控，预测</li></ol></li></ul>',5),n=[o];function s(a,p,_,c,h,u){return i(),t("div",null,n)}const m=e(r,[["render",s]]);export{d as __pageData,m as default};

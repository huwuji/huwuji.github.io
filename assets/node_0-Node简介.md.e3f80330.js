import{_ as o,c as e,o as l,a as i}from"./app.ee7dae8a.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Node 简介","slug":"node-简介","link":"#node-简介","children":[]}],"relativePath":"node/0-Node简介.md"}'),r={name:"node/0-Node简介.md"},t=i('<h2 id="node-简介" tabindex="-1">Node 简介 <a class="header-anchor" href="#node-简介" aria-hidden="true">#</a></h2><ol><li><p>Node 的起源？ Node 是 Ryan Dahl 在探索高性能 Web 服务器的过程中，找到了<strong>高性能</strong>，<strong>Web 服务器</strong>的要点是<strong>非阻塞 I/O，事件驱动</strong>，然后结合当时的语言性质和门槛和 Chrome，javascript 发展情况，决定围绕 Chrome 的 V8 引擎为基础，设计<strong>一个高性能 Web 服务器，并提供一套库</strong>； 后面经过不断的发展，变成了<strong>构建网络应用的一个基础框架</strong>，使用它<strong>构建如服务器，客户端，命令行工具</strong>等等</p></li><li><p>Node 名字由来？ Node 及节点，含义为用一个个 Node 进程（程序）构建一个复杂的网络应用； 而 Node 本身设计为一个强制不共享任何资源的单线程，单进程系统，为构建大型分布式应用程序提供构建基础，其目标也是成为一个构建<strong>快速，可伸缩</strong>的网络应用平台；</p></li><li><p>Node 给 JavaScript 带来了什么？<br> Node 给 JavaScript 带来了全栈的能力；<br> 我们知道 JavaSctipt 是基于浏览器，而它发展则基于 Chrome 的 V8 引擎的加成；<br> Node 的结构和 Chrome 非常相似，JavaScript 作用于 V8，V8 依赖于中间层（Node 中是利用 libuv 库）调用硬件如网卡，硬盘，显卡等；</p><p>它们也都是基于<strong>事件驱动的异步架构</strong>，浏览器通过事件驱动来服务界面上的交互；Node 通过事件驱动来服务 I/O;</p><p>它们有着相同的机制和运行原理；</p></li><li><p>Node 的特点？</p><ul><li><p>4.1 异步 I/O</p></li><li><p>4.2 事件 / 事件驱动 &gt; 事件循环</p></li><li><p>4.3 单线程<br> 优点：</p><ul><li>心智负担少；运行逻辑简单，不用像多进程，多线程一样，考虑死锁等问题；</li><li>资源消耗少；</li></ul><p>缺点：</p><ul><li>CPU 利用率低，单个线程只能利用一个 CPU 内核；</li><li>健壮性差，单线程执行出错后，容错机制差；</li><li>CPU 计算差，处理长计算时，I/O 不能被及时响应；</li></ul><p>优化方案： 对与这些单线程的缺点，Node 通过创建<strong>子进程 child_process</strong>的方式来解决，拓展了 Node 的能力，合理的调度能充分发挥 Node 的能力；</p><blockquote><p>PS: Node 的子进程 child_process 库利用 master-worker 的管理方式，借鉴于<strong>Web Worker</strong>的创建进程和管理的方式；</p></blockquote></li><li><p>4.4 跨平台<br> Node 的跨平台是通过 libuv 库来实现在 Linux，Window 等间的跨平台； 在 Node 的架构中，libuv 库充当着 V8 和底层硬件间的中间层；</p></li></ul></li><li><p>Node 的运用场景</p><ul><li><p>I/O 密集型： 异步 I/O 和事件机制，事件循环等，天然的利于对 I/O 密集型；</p></li><li><p>CPU 密集型：对于 CPU 密集型处理，利用对<strong>子进程 child_process 的合理调度</strong>，也能很好的处理个问题。（ps:也可以通过优化针对 CPU 利用的 C++库程序）</p></li><li><p>运用举例：</p><ul><li>实时应用（语音，视频等）：利用 Node 带来的高性能 I/O；（对实时应用来说，是不停的进行拉取网络资源这个 I/O 操作，然后解析资源）</li><li>分布式调用（分布式库查询等）：利用**并行（异步和子进程管理）**来进行更高效的分布式调用；</li><li><strong>类似 BFF 或 SSR，SSG 等工具类：提升前端功能，提升 Web 渲染能力</strong></li><li>...</li></ul></li></ul></li></ol>',2),s=[t];function n(p,d,a,c,_,N){return l(),e("div",null,s)}const h=o(r,[["render",n]]);export{u as __pageData,h as default};
